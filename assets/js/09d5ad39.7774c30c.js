(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{65:function(e,n,s){"use strict";s.r(n),s.d(n,"frontMatter",(function(){return u})),s.d(n,"metadata",(function(){return o})),s.d(n,"toc",(function(){return c})),s.d(n,"default",(function(){return l}));var t=s(3),a=s(8),i=(s(0),s(95)),u={id:"examples",title:"Examples"},o={unversionedId:"examples",id:"examples",isDocsHomePage:!1,title:"Examples",description:"Publish Website to GitHub Pages",source:"@site/docs/examples.md",sourceDirName:".",slug:"/examples",permalink:"/docs/examples",version:"current",frontMatter:{id:"examples",title:"Examples"},sidebar:"someSidebar",previous:{title:"Run to Build and Publish",permalink:"/docs/run"}},c=[{value:"Publish Website to GitHub Pages",id:"publish-website-to-github-pages",children:[]},{value:"Use Docusaurus 2 + mdoc + GitHub Actions",id:"use-docusaurus-2--mdoc--github-actions",children:[{value:"Docusaurus 2",id:"docusaurus-2",children:[]},{value:"Mdoc + Docusaurus 2",id:"mdoc--docusaurus-2",children:[]},{value:"GitHub Actions",id:"github-actions",children:[]}]}],r={toc:c};function l(e){var n=e.components,s=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(t.a)({},r,s,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"publish-website-to-github-pages"},"Publish Website to GitHub Pages"),Object(i.b)("p",null,"To publish your website to GitHub Actions, first, make sure you have ",Object(i.b)("inlineCode",{parentName:"p"},"gh-pages")," branch.\nIf you don't already have it, create it first."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},'# Move to some temporary location.\n# Clone your project. This one will be removed once the `gh-pages` creation is done.\n$ git clone git@github.com:USERNAME/YOUR_PROJECT.git\n\n$ cd YOUR_PROJECT\n\n$ git checkout --orphan gh-pages\n\n# Make sure you\'re in the project directory.\n$ git rm -rf .\n\n$ git commit --allow-empty -m "Add gh-pages branch"\n\n$ git push origin gh-pages\n\n# Now you can remove this project in the temporary location.\n')),Object(i.b)("h2",{id:"use-docusaurus-2--mdoc--github-actions"},"Use Docusaurus 2 + mdoc + GitHub Actions"),Object(i.b)("h3",{id:"docusaurus-2"},"Docusaurus 2"),Object(i.b)("p",null,"Create a Docusarus site directory using its template. You need node for using Docusaurus."),Object(i.b)("p",null,"e.g.)"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"npx @docusaurus/init@next init website classic \n")),Object(i.b)("p",null,"It creates the Docusarus folder at ",Object(i.b)("inlineCode",{parentName:"p"},"PROJECT_HOME/website/"),"."),Object(i.b)("p",null,"Check out the ",Object(i.b)("a",{parentName:"p",href:"https://v2.docusaurus.io/docs/"},"Docusuarus docs")," and finish configuration."),Object(i.b)("h3",{id:"mdoc--docusaurus-2"},"Mdoc + Docusaurus 2"),Object(i.b)("p",null,"Add ",Object(i.b)("inlineCode",{parentName:"p"},"sbt-mdoc")," plugin and ",Object(i.b)("inlineCode",{parentName:"p"},"sbt-docusaur")," to ",Object(i.b)("inlineCode",{parentName:"p"},"project/plugins.sbt"),". "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala",metastring:'title="project/plugins.sbt"',title:'"project/plugins.sbt"'},'addSbtPlugin("org.scalameta" % "sbt-mdoc" % "2.2.20" )\n\naddSbtPlugin("io.kevinlee" % "sbt-docusaur" % "0.7.0")\n')),Object(i.b)("p",null,"In your ",Object(i.b)("inlineCode",{parentName:"p"},"build.sbt"),", add a sub-project for the doc site with ",Object(i.b)("inlineCode",{parentName:"p"},"sbt-mdoc")," and ",Object(i.b)("inlineCode",{parentName:"p"},"sbt-docusaur"),", and set up the Docusarus."),Object(i.b)("p",null,"e.g.)"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala",metastring:'title="build.sbt"',title:'"build.sbt"'},'lazy val noPublish = Seq(\n  publish := {},\n  publishLocal := {},\n  publishArtifact := false,\n  skip in publish := true,\n)\n\nlazy val docs = (project in file("generated-docs"))\n  .enablePlugins(MdocPlugin, DocusaurPlugin)\n  .settings(\n    name := "docs",\n\n    docusaurDir := (ThisBuild / baseDirectory).value / "website",\n    docusaurBuildDir := docusaurDir.value / "build",\n  )\n  .settings(noPublish) // This is optional to exclude this sub-project\n                       // when sbt publish to upload the artifacts.\n\n')),Object(i.b)("p",null,"In your ",Object(i.b)("inlineCode",{parentName:"p"},"website/docusaurus.config.js"),", make sure that Docusaurus knows where your generated Makrdown files are.\nSo make sure your Docusaurus config has"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"docs: {\n  path: '../generated-docs/target/mdoc/'\n}\n")),Object(i.b)("p",null,"So it may look like,"),Object(i.b)("p",null,"e.g.)"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript",metastring:'title="website/docusaurus.config.js"',title:'"website/docusaurus.config.js"'},"module.exports = {\n  // ...\n\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        docs: {\n          path: '../generated-docs/target/mdoc/',\n          homePageId: 'docs',\n          sidebarPath: require.resolve('./sidebars.js'),\n        },\n    ]\n  ]\n\n  // ...\n};\n")),Object(i.b)("h3",{id:"github-actions"},"GitHub Actions"),Object(i.b)("p",null,"Just place the following yaml file in ",Object(i.b)("inlineCode",{parentName:"p"},"YOUR_PROJECT/.github/workflows/")),Object(i.b)("p",null,"Whenever push happens on the ",Object(i.b)("inlineCode",{parentName:"p"},"main")," branch, it publishes the website. ",Object(i.b)("br",null),"\nIt uses Mdoc to generate the Markdown files with the Scala code compiled and run.",Object(i.b)("br",null),"\nAfter that it builds Docusarus website then publish to ",Object(i.b)("inlineCode",{parentName:"p"},"gh-pages"),"."),Object(i.b)("p",null,"e.g.)"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".github/workflows/publish-github-pages.yml"',title:'".github/workflows/publish-github-pages.yml"'},"name: \"Publish GitHub Pages\"\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build_and_publish_doc_site:\n    if: github.ref != 'refs/heads/gh-pages' && github.ref != 'gh-pages'\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        scala:\n          - { binary-version: \"2.12\", java-version: \"adopt@1.8\" }\n\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - uses: olafurpg/setup-scala@v10\n        with:\n          java-version: ${{ matrix.scala.java-version }}\n      - uses: actions/setup-node@v2.1.5\n        with:\n          node-version: '14.4.0'\n          registry-url: 'https://registry.npmjs.org'\n\n      - name: Cache SBT\n        uses: actions/cache@v2\n        with:\n          path: |\n            ~/.ivy2/cache\n            ~/.cache/coursier\n            ~/.sbt\n          key: ${{ runner.os }}-sbt-${{ matrix.scala.binary-version }}-${{ hashFiles('**/*.sbt') }}\n          restore-keys: |\n            ${{ runner.os }}-sbt-${{ matrix.scala.binary-version }}-\n\n      - name: Cache npm\n        uses: actions/cache@v2\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Build and publish website\n        env:\n          ALGOLIA_API_KEY: ${{ secrets.ALGOLIA_API_KEY }}\n          ALGOLIA_INDEX_NAME: ${{ secrets.ALGOLIA_INDEX_NAME }}\n          GA_TRACKING_ID: ${{ secrets.GA_TRACKING_ID }}\n          GA_ANONYMIZE_IP: ${{ secrets.GA_ANONYMIZE_IP }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          sbt clean \\\n            docs/mdoc \\\n            docs/docusaurGenerateAlgoliaConfigFile \\\n            docs/docusaurGenerateGoogleAnalyticsConfigFile \\\n            docs/docusaurInstall \\\n            docs/docusaurCleanBuild \\\n            docs/docusaurBuild \\\n            docs/publishToGitHubPages\n")))}l.isMDXComponent=!0}}]);